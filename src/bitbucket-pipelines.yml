clone:
  depth: full              # SonarCloud scanner needs the full history to assign issues properly

definitions:
  steps:
    - step: &step-unit-tests
        name: Unit tests
        image: openjdk:11-slim
        caches:
          - gradle
        script:
          - bin/unit-tests.sh
        artifacts:
          - build/**
    - step: &step-integration-tests
        name: Integration tests
        image: openjdk:11-slim
        caches:
          - gradle
        services:
          - mysql
        script:
          - bin/integration-tests.sh
        artifacts:
          - build/**
    - step: &step-sonarcloud
        name: SonarCloud analysis
        image: openjdk:11-slim
        caches:
          - gradle
          - sonar
        script:
          - bin/sonarcloud.sh
        artifacts:
          - build/**
  caches:
    sonar: ~/.sonar/cache  # Caching SonarCloud artifacts will speed up your build
  services:
    mysql:
      image: mysql:5.7
      environment:
        MYSQL_ALLOW_EMPTY_PASSWORD: 'true'

pipelines:
  default:
      - step: *step-unit-tests
      - step: *step-integration-tests
      - step: *step-sonarcloud
  branches:
    master:
      - step: *step-unit-tests
      - step: *step-integration-tests
      - step: *step-sonarcloud  
      - step:
          name: Build
          image: openjdk:11-slim
          caches:
            - gradle
          script:
            - bin/build.sh
          artifacts:
            - build/libs/** # Only need the JAR file for Docker build that follows
      - step:
          name: Docker build
          image:
            name: r.tide.co/build-base:deployer
            username: $DOCKER_USER
            password: $DOCKER_PASSWORD
          caches:
            - docker
          script:
            - /build/docker-build.sh
      - step:
          name: Deploy to WIP
          deployment: wip
          image:
            name: r.tide.co/build-base:deployer
            username: $DOCKER_USER
            password: $DOCKER_PASSWORD
          script:
            - /build/ansible/deploy.sh
      - step:
          name: Deploy to Staging
          trigger: manual
          deployment: staging
          image:
            name: r.tide.co/build-base:deployer
            username: $DOCKER_USER
            password: $DOCKER_PASSWORD
          script:
            - /build/ansible/deploy.sh
      - step:
          name: Deploy to Production
          trigger: manual
          deployment: prod
          image:
            name: r.tide.co/build-base:deployer
            username: $DOCKER_USER
            password: $DOCKER_PASSWORD
          script:
            - /build/ansible/deploy.sh
  custom:
    rollback:
      - step:
          name: Staging Rollback
          trigger: manual
          deployment: staging
          image:
            name: r.tide.co/build-base:deployer
            username: $DOCKER_USER
            password: $DOCKER_PASSWORD
          script:
            - /build/ansible/deploy.sh "rollback"
      - step:
          name: Production Rollback
          trigger: manual
          deployment: prod
          image:
            name: r.tide.co/build-base:deployer
            username: $DOCKER_USER
            password: $DOCKER_PASSWORD
          script:
            - /build/ansible/deploy.sh "rollback"
options:
  docker: true
