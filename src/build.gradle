//plugins {
//    id 'org.springframework.boot' version '2.1.3.RELEASE'
//    id 'nu.studer.jooq' version '3.0.3'
//    id 'org.sonarqube' version '2.7.1'
//    id 'jacoco'
//}
//
//apply from: 'libraries.gradle'
//
//apply plugin: 'java'
//apply plugin: 'idea'
//apply plugin: 'io.spring.dependency-management'
//
//group = 'co.tide'
//version = '1.0-SNAPSHOT'
//
//sourceCompatibility = 11
//targetCompatibility = 11
//
//repositories {
//    mavenLocal()
//    mavenCentral()
//    jcenter()
//
//    maven {
//        url "s3://tide-maven-repo/releases"
//        credentials(AwsCredentials) {
//            accessKey AWS_ACCESS_KEY
//            secretKey AWS_SECRET_KEY
//        }
//    }
//
//    maven {
//        url "s3://tide-maven-repo/snapshots"
//        credentials(AwsCredentials) {
//            accessKey AWS_ACCESS_KEY
//            secretKey AWS_SECRET_KEY
//        }
//    }
//}
//
//// Replace version suggested by Spring Boot with version we use to generate code.
//// https://github.com/etiennestuder/gradle-jooq-plugin/blob/master/README.md#defining-the-jooq-version-when-the-spring-boot-plugin-is-applied
//ext['jooq.version'] = ext['jooqVersion']
//
//dependencies {
//
//    // Database driver for jOOQ
//    jooqRuntime(libraries.mysql)
//
//    // Lombok
//    compileOnly "org.projectlombok:lombok"
//    annotationProcessor "org.projectlombok:lombok"
//
//    // Spring dependencies
//    implementation(libraries.springBootStarterWeb)
//    implementation(libraries.springBootActuator)
//
//    // Database dependencies
//    implementation(libraries.springBootStarterJdbc)
//    implementation(libraries.hikari)
//    implementation(libraries.liquibase)
//    implementation(libraries.jooq)
//    runtimeOnly(libraries.mysql)
//
//    // gRPC dependencies
//    implementation(libraries.grpcSpring)
//    implementation(libraries.grpcTideCommon)
//    implementation(libraries.grpcTideMessage)
//
//    // Tide dependencies
//    implementation(libraries.tideLoggingGeneral)
//
//    // Test
//    testImplementation(libraries.springBootStarterTest)
//    testImplementation(libraries.jUnit5Api)
//    testRuntimeOnly(libraries.jUnit5Engine)
//    testImplementation(libraries.mockitoJunit5)
//    testImplementation(libraries.tideTestAnnotations)
//    testImplementation(libraries.tideTestJUnit5General)
//}
//
//sonarqube {
//    properties {
//        // If you add more test tasks, make sure to add the Jacoco output files into this property. Wildcards are not supported.
//        property "sonar.jacoco.reportPaths", "build/jacoco/unitTest.exec,build/jacoco/integrationTest.exec,build/jacoco/apiTest.exec,build/jacoco/endToEndTest.exec"
//        property "sonar.exclusions", "src/generated-db-entities/**"
//    }
//}
//
//task unitTest(type: Test) {
//    useJUnitPlatform {
//        maxParallelForks = Runtime.runtime.availableProcessors()
//        include '**/*UTest.class'
//    }
//    failFast = true
//}
//
//task integrationTest(type: Test) {
//    useJUnitPlatform {
//        includeEngines 'junit-jupiter'
//        include '**/*ITest.class'
//    }
//    failFast = true
//}
//
//task jooqGen {
//    dependsOn += 'generateServiceJooqSchemaSource'
//}
//
//jooq {
//    version = libraries.jooqVersion
//    service(sourceSets.main) {
//        jdbc {
//            driver = 'com.mysql.cj.jdbc.Driver'
//            url = 'jdbc:mysql://127.0.0.1:3306/@@db-name@@'
//            user = 'root'
//            password = ''
//            properties {
//                property {
//                    // We don't need SSL for generating sources and MySQL requires that we are explicit with this,
//                    // otherwise ugly warnings appear in the output.
//                    key = 'useSSL'
//                    value = 'false'
//                }
//            }
//        }
//        generator {
//            name = 'org.jooq.codegen.DefaultGenerator'
//            database {
//                name = 'org.jooq.meta.mysql.MySQLDatabase'
//                inputSchema = '@@db-name@@'
//                outputSchemaToDefault = true
//                excludes = 'DATABASECHANGELOG|DATABASECHANGELOGLOCK'
//            }
//            generate {
//                relations = false
//                deprecated = false
//                records = true
//                pojos = true
//                daos = true
//                springAnnotations = true
//                javaTimeTypes = true
//                fluentSetters = true
//                pojosEqualsAndHashCode = true
//            }
//            target {
//                packageName = 'co.tide.@@package-name@@.db.jooq'
//                directory = 'src/generated-db-entities/java/'
//            }
//        }
//    }
//}
//
//// Treat the generated sources as a separated source set so that people don't get confused in PRs.
//sourceSets {
//    main {
//        java {
//            srcDirs 'src/generated-db-entities/java'
//        }
//    }
//}
//
//// We don't want jOOQ to run on every compile.
//project.tasks.getByName('compileJava').dependsOn -= 'generateServiceJooqSchemaSource'
//
//bootRun {
//    // The profile can be passed as ./gradlew clean bootRun -Dspring.profiles.active=dev
//    systemProperties['spring.profiles.active']=project.gradle.startParameter.systemPropertiesArgs['spring.profiles.active']
//}
